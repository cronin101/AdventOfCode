{-# LANGUAGE OverloadedStrings #-}

import Data.List
import Lib (add, explode, explodeAt', readPair, reduce, reduceMany, split, toExplode)
import Test.Hspec

main :: IO ()
main = hspec $ do
  describe "add" $ do
    it "can add [[[[4,3],4],4],[7,[[8,4],9]]] + [1,1]" $ do
      (readPair "[[[[4,3],4],4],[7,[[8,4],9]]]" `add` readPair "[1,1]") `shouldBe` readPair "[[[[[4,3],4],4],[7,[[8,4],9]]],[1,1]]"
      show (readPair "[[[[4,3],4],4],[7,[[8,4],9]]]" `add` readPair "[1,1]") `shouldBe` "[[[[[4,3],4],4],[7,[[8,4],9]]],[1,1]]"
      show (readPair "[[[[[4,3],4],4],[7,[[8,4],9]]],[1,1]]") `shouldBe` "[[[[[4,3],4],4],[7,[[8,4],9]]],[1,1]]"
    it "can add [[[0,[4,5]],[0,0]],[[[4,5],[2,6]],[9,5]]] + 7,[[[3,7],[4,3]],[[6,3],[8,8]]]]" $ do
      show (readPair "[[[0,[4,5]],[0,0]],[[[4,5],[2,6]],[9,5]]]" `add` readPair "[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]") `shouldBe` "[[[[0,[4,5]],[0,0]],[[[4,5],[2,6]],[9,5]]],[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]]"
      show (readPair "[[[[0,[4,5]],[0,0]],[[[4,5],[2,6]],[9,5]]],[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]]") `shouldBe` "[[[[0,[4,5]],[0,0]],[[[4,5],[2,6]],[9,5]]],[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]]"

  describe "reduce" $ do
    it "can reduce [[[[[4,3],4],4],[7,[[8,4],9]]],[1,1]]" $ do
      show (reduce $ readPair "[[[[[4,3],4],4],[7,[[8,4],9]]],[1,1]]") `shouldBe` "[[[[0,7],4],[[7,8],[6,0]]],[8,1]]"
    it "can reduce [[[[0,[4,5]],[0,0]],[[[4,5],[2,6]],[9,5]]],[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]]" $ do
      show (reduce $ readPair "[[[[0,[4,5]],[0,0]],[[[4,5],[2,6]],[9,5]]],[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]]") `shouldBe` "[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,9],[5,0]]]]"

  describe "explode" $ do
    it "handles [[[[[9,8],1],2],3],4]" $ do
      (show . (\x -> explodeAt' (toExplode x) 0 Nothing x) . readPair) "[[[[[9,8],1],2],3],4]" `shouldBe` "(Just ((-1,0),(9,0)),[[[[0,9],2],3],4])"
      ((show . explode . readPair) "[[[[[9,8],1],2],3],4]" `shouldBe` (show . readPair) "[[[[0,9],2],3],4]")
    it "handles [7,[6,[5,[4,[3,2]]]]]" $ do
      (show . (\x -> explodeAt' (toExplode x) 0 Nothing x) . readPair) "[7,[6,[5,[4,[3,2]]]]]" `shouldBe` "(Just ((3,4),(0,2)),[7,[6,[5,[7,0]]]])"
      ((show . explode . readPair) "[7,[6,[5,[4,[3,2]]]]]" `shouldBe` (show . readPair) "[7,[6,[5,[7,0]]]]")
    it "handles [[6,[5,[4,[3,2]]]],1]" $ do
      ((show . explode . readPair) "[[6,[5,[4,[3,2]]]],1]" `shouldBe` (show . readPair) "[[6,[5,[7,0]]],3]")
    it "handles [[3,[2,[1,[7,3]]]],[6,[5,[4,[3,2]]]]]" $ do
      ((show . explode . readPair) "[[3,[2,[1,[7,3]]]],[6,[5,[4,[3,2]]]]]" `shouldBe` (show . readPair) "[[3,[2,[8,0]]],[9,[5,[4,[3,2]]]]]")
    it "handles [[3,[2,[8,0]]],[9,[5,[4,[3,2]]]]]" $ do
      ((show . explode . readPair) "[[3,[2,[8,0]]],[9,[5,[4,[3,2]]]]]" `shouldBe` (show . readPair) "[[3,[2,[8,0]]],[9,[5,[7,0]]]]")
    it "handles [[[[[4,3],4],4],[7,[[8,4],9]]],[1,1]]" $ do
      ((show . explode . readPair) "[[[[[4,3],4],4],[7,[[8,4],9]]],[1,1]]" `shouldBe` (show . readPair) "[[[[0,7],4],[7,[[8,4],9]]],[1,1]]")
    it "handles [[[[0,7],4],[7,[[8,4],9]]],[1,1]]" $ do
      (show . explode . readPair) "[[[[0,7],4],[7,[[8,4],9]]],[1,1]]" `shouldBe` (show . readPair) "[[[[0,7],4],[15,[0,13]]],[1,1]]"
    it "handles [[[[0,7],4],[[7,8],[0,[6,7]]]],[1,1]]" $ do
      (show . explode . readPair) "[[[[0,7],4],[[7,8],[0,[6,7]]]],[1,1]]" `shouldBe` (show . readPair) "[[[[0,7],4],[[7,8],[6,0]]],[8,1]]"
    it "handles [[[[0,[4,5]],[0,0]],[[[4,5],[2,6]],[9,5]]],[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]]" $ do
      (show . explode . readPair) "[[[[0,[4,5]],[0,0]],[[[4,5],[2,6]],[9,5]]],[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]]" `shouldBe` (show . readPair) "[[[[4,0],[5,0]],[[[4,5],[2,6]],[9,5]]],[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]]"
    it "handles [[[[4,0],[5,0]],[[[4,5],[2,6]],[9,5]]],[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]]" $ do
      (show . (\x -> explodeAt' (toExplode x) 0 Nothing x) . readPair) "[[[[4,0],[5,0]],[[[4,5],[2,6]],[9,5]]],[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]]" `shouldBe` "(Just ((1,3),(4,5)),[[[[4,0],[5,0]],[[0,[2,6]],[9,5]]],[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]])"
      (show . explode . readPair) "[[[[4,0],[5,0]],[[[4,5],[2,6]],[9,5]]],[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]]" `shouldBe` (show . readPair) "[[[[4,0],[5,4]],[[0,[7,6]],[9,5]]],[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]]"
    it "handles [[[[4,0],[5,4]],[[0,[7,6]],[9,5]]],[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]]" $ do
      (show . explode . readPair) "[[[[4,0],[5,4]],[[0,[7,6]],[9,5]]],[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]]" `shouldBe` "[[[[4,0],[5,4]],[[7,0],[15,5]]],[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]]"
    it "handles [[[[4,0],[5,4]],[[7,0],[15,5]]],[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]]" $ do
      (show . toExplode . readPair) "[[[[4,0],[5,4]],[[7,0],[15,5]]],[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]]" `shouldBe` "Just (5,[3,7])"
      (show . explode . readPair) "[[[[4,0],[5,4]],[[7,0],[15,5]]],[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]]" `shouldBe` "[[[[4,0],[5,4]],[[7,0],[15,5]]],[10,[[0,[11,3]],[[6,3],[8,8]]]]]"
    it "handles [[[[4,0],[5,4]],[[7,0],[[7,8],5]]],[10,[[0,[11,3]],[[6,3],[8,8]]]]]" $ do
      (show . explode . readPair) "[[[[4,0],[5,4]],[[7,0],[[7,8],5]]],[10,[[0,[11,3]],[[6,3],[8,8]]]]]" `shouldBe` "[[[[4,0],[5,4]],[[7,7],[0,13]]],[10,[[0,[11,3]],[[6,3],[8,8]]]]]"
    it "handles [[[[4,0],[5,4]],[[7,7],[0,[6,7]]]],[10,[[0,[11,3]],[[6,3],[8,8]]]]]" $ do
      (show . explode . readPair) "[[[[4,0],[5,4]],[[7,7],[0,[6,7]]]],[10,[[0,[11,3]],[[6,3],[8,8]]]]]" `shouldBe` "[[[[4,0],[5,4]],[[7,7],[6,0]]],[17,[[0,[11,3]],[[6,3],[8,8]]]]]"
    it "handles [[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,9],[[0,[11,3]],[[6,3],[8,8]]]]]" $ do
      (show . explode . readPair) "[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,9],[[0,[11,3]],[[6,3],[8,8]]]]]" `shouldBe` "[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,9],[[11,0],[[9,3],[8,8]]]]]"
    it "handles [[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,9],[[[5,6],0],[[9,3],[8,8]]]]]" $ do
      (show . explode . readPair) "[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,9],[[[5,6],0],[[9,3],[8,8]]]]]" `shouldBe` "[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,14],[[0,6],[[9,3],[8,8]]]]]"
    it "handles [[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[0,6],[[9,3],[8,8]]]]]" $ do
      (show . explode . readPair) "[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[0,6],[[9,3],[8,8]]]]]" `shouldBe` "[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[0,15],[0,[11,8]]]]]"
    it "handles [[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[0,[7,8]],[0,[11,8]]]]]" $ do
      (show . explode . readPair) "[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[0,[7,8]],[0,[11,8]]]]]" `shouldBe` "[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,0],[8,[11,8]]]]]"
    it "handles [[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,0],[8,[[5,6],8]]]]]" $ do
      (show . explode . readPair) "[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,0],[8,[[5,6],8]]]]]" `shouldBe` "[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,0],[13,[0,14]]]]]"
    it "handles [[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,0],[[6,7],[0,14]]]]]" $ do
      (show . explode . readPair) "[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,0],[[6,7],[0,14]]]]]" `shouldBe` "[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,6],[0,[7,14]]]]]"
    it "handles [[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,6],[0,[7,[7,7]]]]]]" $ do
      (show . explode . readPair) "[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,6],[0,[7,[7,7]]]]]]" `shouldBe` "[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,6],[0,[14,0]]]]]"
    it "handles [[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,6],[0,[[7,7],0]]]]]" $ do
      (show . explode . readPair) "[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,6],[0,[[7,7],0]]]]]" `shouldBe` "[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,6],[7,[0,7]]]]]"
    it "handles [[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,6],[7,[0,7]]]]]" $ do
      (show . toExplode . readPair) "[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,6],[7,[0,7]]]]]" `shouldBe` "Just (8,[0,7])"
      (show . (\x -> explodeAt' (toExplode x) 0 Nothing x) . readPair) "[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,6],[7,[0,7]]]]]" `shouldBe` "(Just ((7,8),(0,7)),[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,6],[7,0]]]])"
      (show . explode . readPair) "[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,6],[7,[0,7]]]]]" `shouldBe` "[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,6],[7,0]]]]"
    it "handles [[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,6],[7,0]]]]" $ do
      (show . explode . readPair) "[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,6],[7,0]]]]" `shouldBe` "[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,6],[7,0]]]]"

    describe "split" $ do
      it "handles [[[[4,0],[5,4]],[[7,0],[15,5]]],[10,[[0,[11,3]],[[6,3],[8,8]]]]]" $ do
        (show . split . readPair) "[[[[4,0],[5,4]],[[7,0],[15,5]]],[10,[[0,[11,3]],[[6,3],[8,8]]]]]" `shouldBe` "[[[[4,0],[5,4]],[[7,0],[[7,8],5]]],[10,[[0,[11,3]],[[6,3],[8,8]]]]]"
      it "handles [[[[4,0],[5,4]],[[7,7],[0,13]]],[10,[[0,[11,3]],[[6,3],[8,8]]]]]" $ do
        (show . split . readPair) "[[[[4,0],[5,4]],[[7,7],[0,13]]],[10,[[0,[11,3]],[[6,3],[8,8]]]]]" `shouldBe` "[[[[4,0],[5,4]],[[7,7],[0,[6,7]]]],[10,[[0,[11,3]],[[6,3],[8,8]]]]]"
      it "handles [[[[4,0],[5,4]],[[7,7],[6,0]]],[17,[[0,[11,3]],[[6,3],[8,8]]]]]" $ do
        (show . split . readPair) "[[[[4,0],[5,4]],[[7,7],[6,0]]],[17,[[0,[11,3]],[[6,3],[8,8]]]]]" `shouldBe` "[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,9],[[0,[11,3]],[[6,3],[8,8]]]]]"
      it "handles [[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,9],[[11,0],[[9,3],[8,8]]]]]" $ do
        (show . split . readPair) "[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,9],[[11,0],[[9,3],[8,8]]]]]" `shouldBe` "[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,9],[[[5,6],0],[[9,3],[8,8]]]]]"
      it "handles [[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,14],[[0,6],[[9,3],[8,8]]]]]" $ do
        (show . split . readPair) "[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,14],[[0,6],[[9,3],[8,8]]]]]" `shouldBe` "[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[0,6],[[9,3],[8,8]]]]]"
      it "handles [[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[0,15],[0,[11,8]]]]]" $ do
        (show . split . readPair) "[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[0,15],[0,[11,8]]]]]" `shouldBe` "[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[0,[7,8]],[0,[11,8]]]]]"
      it "handles [[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,0],[8,[11,8]]]]]" $ do
        (show . split . readPair) "[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,0],[8,[11,8]]]]]" `shouldBe` "[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,0],[8,[[5,6],8]]]]]"
      it "handles [[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,0],[13,[0,14]]]]]" $ do
        (show . split . readPair) "[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,0],[13,[0,14]]]]]" `shouldBe` "[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,0],[[6,7],[0,14]]]]]"
      it "handles [[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,6],[0,[7,14]]]]]" $ do
        (show . split . readPair) "[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,6],[0,[7,14]]]]]" `shouldBe` "[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,6],[0,[7,[7,7]]]]]]"
      it "handles [[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,6],[0,[14,0]]]]]" $ do
        (show . split . readPair) "[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,6],[0,[14,0]]]]]" `shouldBe` "[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,6],[0,[[7,7],0]]]]]"

    describe "reduceMany" $ do
      it "handles [1,1] [2,2] [3,3] [4,4] [5,5]" $ do
        show (reduceMany $ map readPair ["[1,1]", "[2,2]", "[3,3]", "[4,4]", "[5,5]"]) `shouldBe` "[[[[3,0],[5,3]],[4,4]],[5,5]]"
      it "handles [1,1] [2,2] [3,3] [4,4] [5,5] [6,6]" $ do
        show (reduceMany $ map readPair ["[1,1]", "[2,2]", "[3,3]", "[4,4]", "[5,5]", "[6,6]"]) `shouldBe` "[[[[5,0],[7,4]],[5,5]],[6,6]]"
      it "handles [[[0,[4,5]],[0,0]],[[[4,5],[2,6]],[9,5]]] [7,[[[3,7],[4,3]],[[6,3],[8,8]]]]" $ do
        show (reduceMany $ map readPair ["[[[0,[4,5]],[0,0]],[[[4,5],[2,6]],[9,5]]]", "[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]"]) `shouldBe` "[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,9],[5,0]]]]"
      it "handles [[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,9],[5,0]]]] [[2,[[0,8],[3,4]]],[[[6,7],1],[7,[1,6]]]]" $ do
        show (reduceMany $ map readPair ["[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,9],[5,0]]]]", "[[2,[[0,8],[3,4]]],[[[6,7],1],[7,[1,6]]]]"]) `shouldBe` "[[[[6,7],[6,7]],[[7,7],[0,7]]],[[[8,7],[7,7]],[[8,8],[8,0]]]]"
      it "handles [[[[6,7],[6,7]],[[7,7],[0,7]]],[[[8,7],[7,7]],[[8,8],[8,0]]]] [[[[2,4],7],[6,[0,5]]],[[[6,8],[2,8]],[[2,1],[4,5]]]]" $ do
        show (reduceMany $ map readPair ["[[[[6,7],[6,7]],[[7,7],[0,7]]],[[[8,7],[7,7]],[[8,8],[8,0]]]]", "[[[[2,4],7],[6,[0,5]]],[[[6,8],[2,8]],[[2,1],[4,5]]]]"]) `shouldBe` "[[[[7,0],[7,7]],[[7,7],[7,8]]],[[[7,7],[8,8]],[[7,7],[8,7]]]]"
